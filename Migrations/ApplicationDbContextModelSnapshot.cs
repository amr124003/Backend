// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using myapp.Data;

#nullable disable

namespace myapp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("myapp.auth.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpiryMonth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpiryYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastFourDigits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeTokenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("myapp.auth.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plans", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Remove Add & Unlock All Location",
                            Icon = "1",
                            Name = "Get Basic"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Remove Add & Unlock All Location",
                            Icon = "crown",
                            Name = "Get Premium"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Remove Add & Unlock All Location",
                            Icon = "2",
                            Name = "Get Basic"
                        });
                });

            modelBuilder.Entity("myapp.auth.Models.PlanFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanOptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanOptionId");

                    b.ToTable("PlanFeatures", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Limited VR Training",
                            PlanOptionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Access to Home Scenario",
                            PlanOptionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Limited VR Training",
                            PlanOptionId = 4
                        },
                        new
                        {
                            Id = 4,
                            Description = "Access to Home Scenario",
                            PlanOptionId = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Limited VR Training",
                            PlanOptionId = 7
                        },
                        new
                        {
                            Id = 6,
                            Description = "Access to Home Scenario",
                            PlanOptionId = 7
                        },
                        new
                        {
                            Id = 7,
                            Description = "AI Chatbot Support",
                            PlanOptionId = 2
                        },
                        new
                        {
                            Id = 8,
                            Description = "Home & Factory Scenarios",
                            PlanOptionId = 2
                        },
                        new
                        {
                            Id = 9,
                            Description = "Full VR Training Access",
                            PlanOptionId = 2
                        },
                        new
                        {
                            Id = 10,
                            Description = "Certification",
                            PlanOptionId = 2
                        },
                        new
                        {
                            Id = 11,
                            Description = "AI Chatbot Support",
                            PlanOptionId = 5
                        },
                        new
                        {
                            Id = 12,
                            Description = "Home & Factory Scenarios",
                            PlanOptionId = 5
                        },
                        new
                        {
                            Id = 13,
                            Description = "Full VR Training Access",
                            PlanOptionId = 5
                        },
                        new
                        {
                            Id = 14,
                            Description = "Certification",
                            PlanOptionId = 5
                        },
                        new
                        {
                            Id = 15,
                            Description = "AI Chatbot Support",
                            PlanOptionId = 8
                        },
                        new
                        {
                            Id = 16,
                            Description = "Home & Factory Scenarios",
                            PlanOptionId = 8
                        },
                        new
                        {
                            Id = 17,
                            Description = "Full VR Training Access",
                            PlanOptionId = 8
                        },
                        new
                        {
                            Id = 18,
                            Description = "Certification",
                            PlanOptionId = 8
                        },
                        new
                        {
                            Id = 19,
                            Description = "Unlimited VR Training",
                            PlanOptionId = 3
                        },
                        new
                        {
                            Id = 20,
                            Description = "All Scenarios (Home, Factory, Vehicle)",
                            PlanOptionId = 3
                        },
                        new
                        {
                            Id = 21,
                            Description = "AI Chatbot + Burn Detection",
                            PlanOptionId = 3
                        },
                        new
                        {
                            Id = 22,
                            Description = "Multi-User & Custom Reports",
                            PlanOptionId = 3
                        },
                        new
                        {
                            Id = 23,
                            Description = "Unlimited VR Training",
                            PlanOptionId = 6
                        },
                        new
                        {
                            Id = 24,
                            Description = "All Scenarios (Home, Factory, Vehicle)",
                            PlanOptionId = 6
                        },
                        new
                        {
                            Id = 25,
                            Description = "AI Chatbot + Burn Detection",
                            PlanOptionId = 6
                        },
                        new
                        {
                            Id = 26,
                            Description = "Multi-User & Custom Reports",
                            PlanOptionId = 6
                        },
                        new
                        {
                            Id = 27,
                            Description = "Unlimited VR Training",
                            PlanOptionId = 9
                        },
                        new
                        {
                            Id = 28,
                            Description = "All Scenarios (Home, Factory, Vehicle)",
                            PlanOptionId = 9
                        },
                        new
                        {
                            Id = 29,
                            Description = "AI Chatbot + Burn Detection",
                            PlanOptionId = 9
                        },
                        new
                        {
                            Id = 30,
                            Description = "Multi-User & Custom Reports",
                            PlanOptionId = 9
                        });
                });

            modelBuilder.Entity("myapp.auth.Models.PlanOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationMonths")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PriceUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanOption", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DurationMonths = 1,
                            Label = "1 Month",
                            Note = "that's Basic Plan",
                            PlanId = 1,
                            Price = 0m,
                            PriceUnit = "EGP"
                        },
                        new
                        {
                            Id = 2,
                            DurationMonths = 6,
                            Label = "6 Month",
                            Note = "that's Premium Plan",
                            PlanId = 1,
                            Price = 310m,
                            PriceUnit = "EGP"
                        },
                        new
                        {
                            Id = 3,
                            DurationMonths = 12,
                            Label = "1 Year",
                            Note = "that's Premium Plan",
                            PlanId = 1,
                            Price = 620m,
                            PriceUnit = "EGP"
                        },
                        new
                        {
                            Id = 4,
                            DurationMonths = 1,
                            Label = "1 Month",
                            Note = "that's Basic Plan",
                            PlanId = 2,
                            Price = 0m,
                            PriceUnit = "EGP"
                        },
                        new
                        {
                            Id = 5,
                            DurationMonths = 6,
                            Label = "6 Month",
                            Note = "that's Premium Plan",
                            PlanId = 2,
                            Price = 310m,
                            PriceUnit = "EGP"
                        },
                        new
                        {
                            Id = 6,
                            DurationMonths = 12,
                            Label = "1 Year",
                            Note = "that's Premium Plan",
                            PlanId = 2,
                            Price = 620m,
                            PriceUnit = "EGP"
                        },
                        new
                        {
                            Id = 7,
                            DurationMonths = 1,
                            Label = "1 Month",
                            Note = "that's Basic Plan",
                            PlanId = 3,
                            Price = 0m,
                            PriceUnit = "EGP"
                        },
                        new
                        {
                            Id = 8,
                            DurationMonths = 6,
                            Label = "6 Month",
                            Note = "that's Premium Plan",
                            PlanId = 3,
                            Price = 310m,
                            PriceUnit = "EGP"
                        },
                        new
                        {
                            Id = 9,
                            DurationMonths = 12,
                            Label = "1 Year",
                            Note = "that's Premium Plan",
                            PlanId = 3,
                            Price = 620m,
                            PriceUnit = "EGP"
                        });
                });

            modelBuilder.Entity("myapp.auth.Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Achievements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainingProgress")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("userScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles", (string)null);
                });

            modelBuilder.Entity("myapp.auth.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetOtp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetOtpExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("myapp.auth.Models.PlanFeature", b =>
                {
                    b.HasOne("myapp.auth.Models.PlanOption", "PlanOption")
                        .WithMany("Features")
                        .HasForeignKey("PlanOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanOption");
                });

            modelBuilder.Entity("myapp.auth.Models.PlanOption", b =>
                {
                    b.HasOne("myapp.auth.Models.Plan", "Plan")
                        .WithMany("Options")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("myapp.auth.Models.Profile", b =>
                {
                    b.HasOne("myapp.auth.Models.User", null)
                        .WithOne("Profile")
                        .HasForeignKey("myapp.auth.Models.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("myapp.auth.Models.Profile.Certificates#myapp.auth.Models.CertificateItem", "Certificates", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("DownloadUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PreviewUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("ProfileId")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("ProfileId");

                            b1.ToTable("CertificateItem", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsMany("myapp.auth.Models.Profile.TrainingHistory#myapp.auth.Models.TrainingHistoryItem", "TrainingHistory", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ProfileId")
                                .HasColumnType("int");

                            b1.Property<string>("Status")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("ProfileId");

                            b1.ToTable("TrainingHistoryItem", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("Certificates");

                    b.Navigation("TrainingHistory");
                });

            modelBuilder.Entity("myapp.auth.Models.Plan", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("myapp.auth.Models.PlanOption", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("myapp.auth.Models.User", b =>
                {
                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
